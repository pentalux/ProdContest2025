import requests
from config import Config

class BotHandler:
    def __init__(self, auth_storage):
        self.auth_storage = auth_storage
        self.bot_token = Config.BOT_TOKEN
        self.user_states = {}  # chat_id -> —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞

    def process_update(self, update):
        print(f"Received update: {update}")  # Debug log
        if 'message' in update:
            self._handle_message(update['message'])

    def _handle_message(self, message):
        chat_id = message['chat']['id']
        text = message.get('text', '')
        print(f"Processing message from {chat_id}: {text}")  # Debug log

        if text.startswith('/start'):
            self._handle_start_command(chat_id, text)
        elif 'contact' in message:
            print(f"Received contact from {chat_id}")  # Debug log
            self._handle_contact(chat_id, message['contact'])
        elif self.user_states.get(chat_id) == 'waiting_fio':
            self._handle_fio_input(chat_id, text)
        elif text == '/cancel':
            self._cancel_registration(chat_id)

    def _handle_start_command(self, chat_id, text):
        parts = text.split()
        if len(parts) > 1:
            auth_id = parts[1]
            
            if self.auth_storage.get_session(auth_id):
                self.auth_storage.link_chat_to_auth(chat_id, auth_id)
                self.auth_storage.update_session(auth_id, {'chat_id': chat_id})
                self._start_fio_collection(chat_id)
            else:
                self._send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å—Å—ã–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        else:
            self._send_message(chat_id, "üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Å —Å–∞–π—Ç–∞.")

    def _start_fio_collection(self, chat_id):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–±–æ—Ä –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_states[chat_id] = 'waiting_fio'
        
        message = (
            "üë§ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</code>\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
        )
        
        self._send_message(chat_id, message, parse_mode='HTML')

    def _handle_fio_input(self, chat_id, text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û"""
        if self._validate_fio(text):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            fio_parts = text.split()
            fio_data = {
                'last_name': fio_parts[0],
                'first_name': fio_parts[1],
                'middle_name': fio_parts[2] if len(fio_parts) > 2 else ''
            }
            
            self.auth_storage.save_user_temp_data(chat_id, fio_data)
            self.user_states[chat_id] = 'waiting_contact'
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            self._send_phone_button(chat_id)
        else:
            self._send_message(
                chat_id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</code>",
                parse_mode='HTML'
            )

    def _validate_fio(self, fio_text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –§–ò–û"""
        parts = fio_text.split()
        return len(parts) >= 2 and all(len(part) >= 2 for part in parts[:2])

    def _handle_contact(self, chat_id, contact):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        print(f"Processing contact for chat_id: {chat_id}")  # Debug log
        
        auth_id = self.auth_storage.get_auth_by_chat(chat_id)
        print(f"Auth ID found: {auth_id}")  # Debug log
        
        if auth_id and self.auth_storage.get_session(auth_id):
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –§–ò–û
            fio_data = self.auth_storage.get_user_temp_data(chat_id)
            print(f"FIO data found: {fio_data}")  # Debug log
            
            if not fio_data:
                self._send_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –§–ò–û.")
                self._start_fio_collection(chat_id)
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = {
                'telegram_id': contact['user_id'],
                'phone_number': contact['phone_number'],
                'first_name': fio_data['first_name'],
                'last_name': fio_data['last_name'],
                'middle_name': fio_data['middle_name']
            }
            
            print(f"User data prepared: {user_data}")  # Debug log
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            success = self.auth_storage.complete_session(auth_id, user_data)
            print(f"Session completion: {success}")  # Debug log
            
            if success:
                self.auth_storage.remove_pending_contact(chat_id)
                self.auth_storage.delete_user_temp_data(chat_id)
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if chat_id in self.user_states:
                    del self.user_states[chat_id]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
                full_name = f"{user_data['last_name']} {user_data['first_name']} {user_data['middle_name']}".strip()
                confirmation_message = (
                    "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üë§ <b>–§–ò–û:</b> {full_name}\n"
                    f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data['phone_number']}\n"
                    f"üí∞ <b>–ë–∞–ª–∞–Ω—Å—ã:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: 0 —Ä—É–±., –°–∞–π—Ç: 0 —Ä—É–±.\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç."
                )
                
                self._send_message(chat_id, confirmation_message, parse_mode='HTML', reply_markup={'remove_keyboard': True})
            else:
                self._send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            print(f"No session found for auth_id: {auth_id}")  # Debug log
            self._send_message(chat_id, "‚ùå –°–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.")

    def _send_phone_button(self, chat_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        keyboard = {
            'keyboard': [[{
                'text': 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                'request_contact': True
            }]],
            'resize_keyboard': True,
            'one_time_keyboard': True
        }
        
        self._send_message(
            chat_id, 
            "üì± –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=keyboard
        )

    def _cancel_registration(self, chat_id):
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        if chat_id in self.user_states:
            del self.user_states[chat_id]
        
        self.auth_storage.delete_user_temp_data(chat_id)
        
        auth_id = self.auth_storage.get_auth_by_chat(chat_id)
        if auth_id:
            self.auth_storage.remove_pending_contact(chat_id)
            self.auth_storage.delete_session(auth_id)
        
        self._send_message(
            chat_id,
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup={'remove_keyboard': True}
        )

    def _send_message(self, chat_id, text, reply_markup=None, parse_mode=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f'https://api.telegram.org/bot{self.bot_token}/sendMessage'
        payload = {
            'chat_id': chat_id,
            'text': text
        }
        
        if reply_markup:
            payload['reply_markup'] = reply_markup
        
        if parse_mode:
            payload['parse_mode'] = parse_mode
        
        try:
            print(f"Sending message to {chat_id}: {text}")  # Debug log
            response = requests.post(url, json=payload, timeout=10)
            result = response.json()
            print(f"Telegram API response: {result}")  # Debug log
            return result
        except Exception as e:
            print(f"Error sending message: {e}")
            return None